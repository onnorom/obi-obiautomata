require 'spec_helper'

on_supported_os = { 
  'RedHat' => {
    'automata_ctrldir' => '/var/tmp/obijictrl', 
    'osfamily' => 'RedHat',
    'os' => {'family' => 'RedHat'},
    'operatingsystem' => 'CentOS',
    'app_environment' => 'production',
  }, 
  'Debian' => {
    'automata_ctrldir' => '/var/tmp/obijictrl', 
    'osfamily' => 'Debian',
    'os' => {'family' => 'Debian'},
    'operatingsystem' => 'Ubuntu',
    'app_environment' => 'production',
  }
}

service_classes = {
  'RedHat' => 'linux',
  'Debian' => 'linux',
  'Windows' => 'windows',
}

#describe 'obijiautomata' do
describe 'obijiautomata::orchestrator' do
  on_supported_os.each do |os, facts|
    context "on #{os}" do
      let(:title) { 'obijiautomata' } # sets title of the class declaration
      let(:node) { 'test.example.com' } # set name of node if needed

      let(:facts) do 
        facts 
      end

      ['cron','service'].each do |x| it { 
      let(:params) { {
        :servicetype => 'service',
      } }
      } 
      end

      #it { should contain_class('obijiautomata') }
      #it { should contain_class('obijiautomata::orchestrator') }
      it { is_expected.to contain_class("obijiautomata::service::#{service_classes[os]}")
	 .with(
	   :ensure => true,
         ) 

	 #is_expected.to contain_cron("puppet-apply-#{title}").with(:ensure => 'present') 
	 is_expected.to contain_service("#{title}-#{facts['app_environment']}").with(:ensure => true, :enable => true) 
	 is_expected.to contain_file("/etc/automata/bin/#{title}-#{facts['app_environment']}.sh")
	 is_expected.to contain_file("/etc/systemd/system/#{title}-#{facts['app_environment']}.service")
      }
      it { is_expected.to compile.with_all_deps }
    end
  end

  context 'on Windows' do
    let(:facts) { {
      :osfamily => 'Windows',
      :os => {'family' => 'Windows'},
      :operatingsystem => 'MS Windows',
      'automata_ctrldir' => '/var/tmp/obijictrl', 
    } }

    it { is_expected.to contain_class("obijiautomata::service::#{service_classes['Windows']}") }
    it { is_expected.to compile.with_all_deps }
 end
end

